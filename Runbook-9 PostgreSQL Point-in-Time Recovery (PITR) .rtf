{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;\f2\fswiss\fcharset0 Arial-BoldMT;
\f3\fmodern\fcharset0 Courier;\f4\fmodern\fcharset0 Courier-Bold;\f5\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red217\green11\blue5;\red109\green109\blue109;\red85\green142\blue40;
\red253\green128\blue8;\red251\green2\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c88946\c14202\c0;\cssrgb\c50196\c50196\c50196;\cssrgb\c39975\c61335\c20601;
\cssrgb\c100000\c57637\c0;\cssrgb\c100000\c25279\c100000;\csgray\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\paperw11900\paperh16840\margl1440\margr1440\vieww35640\viewh19080\viewkind0
\deftab720
\pard\pardeftab720\sa321\partightenfactor0

\f0\b\fs48 \cf0 \expnd0\expndtw0\kerning0
Runbook for PostgreSQL Point-in-Time Recovery (PITR) 
\fs36 \
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs38 \cf0 This runbook outlines the step-by-step process to perform Point-in-Time Recovery (PITR) of a PostgreSQL cluster managed via Kubernetes, leveraging backups stored in AWS S3 and the EnterpriseDB Postgres Kubernetes operator.
\fs24 \
\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs48 \cf2 Pre-requisites
\fs36 \cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Kubernetes cluster
\f1\b0  with EnterpriseDB Postgres Kubernetes operator installed.\
\ls1\ilvl0
\f0\b \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
AWS CLI
\f1\b0  configured with appropriate access keys and permissions.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
PostgreSQL cluster with backup enabled and WAL archiving to an S3 bucket.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
YAML configuration files for backup and PITR setup.\
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sa321\partightenfactor0

\f2\b\fs48 \cf2 Test Case 1: With 
\fs36 targetTime
\f0\fs48 \cf0 \

\f1\b0\fs36 \cf3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf4 Step 1: Verify Cluster Status and Configuration\cf0 \
\pard\pardeftab720\partightenfactor0

\f3\b0 \cf5 kubectl get pods -L role\cf0 \
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Output:
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f3 \cf0 NAME               READY   STATUS    RESTARTS   AGE   ROLE\
cluster-backup-1   1/1     Running   0          85s   primary\
cluster-backup-2   1/1     Running   0          59s   replica\
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Check detailed cluster status:
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f3 \cf5 kubectl cnp status cluster-backup\cf0 \
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Output:
\f3\b0 \
\pard\pardeftab720\partightenfactor0
\cf0 Cluster Summary\
Name                 default/cluster-backup\
System ID:           7460498715120832537\
PostgreSQL Image:    quay.io/enterprisedb/postgresql:17.0\
Primary instance:    cluster-backup-1\
Primary start time:  2025-01-16 13:05:29 +0000 UTC (uptime 1m35s)\
Status:              Cluster in healthy state \
Instances:           2\
Ready instances:     2\
Size:                94M\
Current Write LSN:   0/4000060 (Timeline: 1 - WAL File: 000000010000000000000004)\
\
Continuous Backup status\
First Point of Recoverability:  Not Available\
Working WAL archiving:          OK\
WALs waiting to be archived:    0\
Last Archived WAL:              000000010000000000000003.00000028.backup   @   2025-01-16T13:06:15.918184Z\
Last Failed WAL:                -\
\
Streaming Replication status\
Replication Slots Enabled\
Name              Sent LSN   Write LSN  Flush LSN  Replay LSN  Write Lag  Flush Lag  Replay Lag  State      Sync State  Sync Priority  Replication Slot\
----              --------   ---------  ---------  ----------  ---------  ---------  ----------  -----      ----------  -------------  ----------------\
cluster-backup-2  0/4000060  0/4000060  0/4000060  0/4000060   00:00:00   00:00:00   00:00:00    streaming  async       0              active\
\
Instances status\
Name              Current LSN  Replication role  Status  QoS         Manager Version  Node\
----              -----------  ----------------  ------  ---         ---------------  ----\
cluster-backup-1  0/4000060    Primary           OK      BestEffort  1.24.1           cnp-1.24.0-control-plane\
cluster-backup-2  0/4000060    Standby (async)   OK      BestEffort  1.24.1           cnp-1.24.0-control-plane\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf4 Step 2: Verify WAL Archiving Status in S3\cf0 \
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 Run the following command to list WAL files:\
\pard\pardeftab720\partightenfactor0

\f3 \cf5 aws s3 ls s3://swapnil-backup/ --recursive --human-readable --summarize\cf0 \
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Output:
\f3\b0 \
\pard\pardeftab720\partightenfactor0
\cf0 2025-01-16 18:28:31    0 Bytes test/\
2025-01-16 18:35:33   16.0 MiB test/cluster-backup/wals/0000000100000000/000000010000000000000001\
2025-01-16 18:35:47   16.0 MiB test/cluster-backup/wals/0000000100000000/000000010000000000000002\
2025-01-16 18:36:02   16.0 MiB test/cluster-backup/wals/0000000100000000/000000010000000000000003\
2025-01-16 18:36:16  338 Bytes test/cluster-backup/wals/0000000100000000/000000010000000000000003.00000028.backup\
\
Total Objects: 5\
   Total Size: 48.0 MiB\
swapnilsuryawanshi@LAPTOP385PNIN cnp-yaml % \
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf4 Step 3: Create the table\cf0 \
\pard\pardeftab720\partightenfactor0

\f3\b0 \cf0 postgres=# \cf5 \\dt+ rama \cf0 \
                                  List of relations\
 Schema | Name | Type  |  Owner   | Persistence | Access method | Size  | Description \
--------+------+-------+----------+-------------+---------------+-------+-------------\
 public | rama | table | postgres | permanent   | heap          | 38 MB | \
(1 row)\
\
postgres=# \
postgres=# \cf5 select count(*) from rama;\cf0 \
  count  \
---------\
 1110300\
(1 row)\
\pard\pardeftab720\sa280\partightenfactor0

\f1 \cf3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf4 Step 3: Perform a Full Backup\cf0 \
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 Create a backup YAML file (
\f3 backup.yaml
\f1 ):\
\pard\pardeftab720\partightenfactor0

\f3 \cf0 apiVersion: postgresql.k8s.enterprisedb.io/v1\
kind: Backup\
metadata:\
  name: pg-full\
spec:\
  cluster:\
    name: cluster-backup\
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Apply the configuration:
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f3 \cf5 kubectl apply -f backup.yaml\cf0 \
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Monitor the backup status:
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f3 \cf5 kubectl get backup \cf0 \
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Output:
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f3 \cf0 NAME      AGE     CLUSTER          METHOD              PHASE       ERROR\
pg-full   5m22s   cluster-backup   barmanObjectStore   completed\
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Verify the backup in S3:
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f3 \cf5 aws s3 ls s3://swapnil-backup/ --recursive --human-readable --summarize\cf0 \
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Output:
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f3 \cf0 2025-01-16 18:28:31    0 Bytes test/\
2025-01-16 18:35:33   16.0 MiB test/cluster-backup/wals/0000000100000000/000000010000000000000001\
2025-01-16 18:35:47   16.0 MiB test/cluster-backup/wals/0000000100000000/000000010000000000000002\
2025-01-16 18:36:02   16.0 MiB test/cluster-backup/wals/0000000100000000/000000010000000000000003\
2025-01-16 18:36:16  338 Bytes test/cluster-backup/wals/0000000100000000/000000010000000000000003.00000028.backup\
2025-01-16 18:40:48   16.0 MiB test/cluster-backup/wals/0000000100000000/000000010000000000000004\
2025-01-16 18:44:37   16.0 MiB test/cluster-backup/wals/0000000100000000/000000010000000000000005\
2025-01-16 18:44:50   16.0 MiB test/cluster-backup/wals/0000000100000000/000000010000000000000006\
2025-01-16 18:45:13   16.0 MiB test/cluster-backup/wals/0000000100000000/000000010000000000000007\
2025-01-16 18:45:26   16.0 MiB test/cluster-backup/wals/0000000100000000/000000010000000000000008\
\
Total Objects: 10\
   Total Size: 128.0 MiB\
\pard\pardeftab720\partightenfactor0

\f1 \cf4 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf4 Step 4: Connect to the database execute the checkpoint and check the time:\cf0 \
\pard\pardeftab720\partightenfactor0

\f3\b0 \cf0 postgres=# \cf5 checkpoint; select now();\cf0 \
CHECKPOINT\
              now              \
-------------------------------\
 2025-01-16 13:25:32.159836+00\
(1 row)\
\
\pard\pardeftab720\partightenfactor0

\f4\b \cf6 NOTE:
\f3\b0  we will use target time: 
\f4\b 2025-01-16 13:25:32
\f3\b0  for PITR
\f0\b \cf0 \
\pard\pardeftab720\sa280\partightenfactor0

\f1\b0 \cf3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf4 Step 5: Create another table swapnil\cf0 \
\pard\pardeftab720\partightenfactor0

\f3\b0 \cf0 postgres=# \cf5 create table swapnil(id int);\cf0 \
CREATE TABLE\
\
postgres=# \cf5 insert into swapnil values(generate_series(1,1000));\cf0 \
INSERT 0 1000\
\
postgres=# \\dt+\
                                    List of relations\
 Schema |  Name   | Type  |  Owner   | Persistence | Access method | Size  | Description \
--------+---------+-------+----------+-------------+---------------+-------+-------------\
 public | rama    | table | postgres | permanent   | heap          | 38 MB | \
 public | swapnil | table | postgres | permanent   | heap          | 64 kB | \
(2 rows)\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf4 Step:6 Create the PITR yaml with targetTime: '2025-01-16 13:25:32', name: pg-full, so it will recover only the Rama table.\cf0 \
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 Determine the target recovery time by checking WAL files or PostgreSQL logs. Example target time: 
\f3 2025-01-16 13:25:32
\f1 \
Create a PITR YAML file (
\f3 pitr.yaml
\f1 ):\
\pard\pardeftab720\partightenfactor0

\f3 \cf0 apiVersion: 
\f5\fs30 \cf7 \kerning1\expnd0\expndtw0 \CocoaLigature0 postgresql.cnpg.io/v1
\f3\fs36 \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
kind: Cluster\
metadata:\
  name: cluster-pitr\
spec:\
  logLevel: info\
  startDelay: 30\
  stopDelay: 30\
  nodeMaintenanceWindow:\
    inProgress: false\
    reusePVC: true\
  backup:\
    target: primary\
  enableSuperuserAccess: true\
  monitoring:\
    disableDefaultQueries: false\
    enablePodMonitor: false\
  minSyncReplicas: 0\
  postgresGID: 26\
  replicationSlots:\
    highAvailability:\
      slotPrefix: _cnp_\
    updateInterval: 30\
  primaryUpdateMethod: switchover\
  bootstrap:\
    recovery:\
      recoveryTarget:\
        targetTime:  '2025-01-16 13:25:32'\
      backup:\
        name: pg-full\
  failoverDelay: 0\
  postgresUID: 26\
  walStorage:\
    resizeInUseVolumes: true\
    size: 1G\
  maxSyncReplicas: 0\
  switchoverDelay: 40000000\
  storage:\
    resizeInUseVolumes: true\
    size: 2Gi\
  primaryUpdateStrategy: unsupervised\
  instances: 1\
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Apply the configuration:
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f3 \cf5 kubectl apply -f pitr.yaml \cf0 \
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Monitor the recovery process by executing ( kubectl describe pod <pod_name> -n namespace):
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f3 \cf0 Events:\
\
  Type    Reason     Age   From               Message\
  ----    ------     ----  ----               -------\
  Normal  Scheduled  73s   default-scheduler  Successfully assigned default/cluster-pitr-1-full-recovery-xzw82 to cnp-1.24.0-control-plane\
  Normal  Pulled     74s   kubelet            Container image "docker.enterprisedb.com/k8s_enterprise/edb-postgres-for-kubernetes:1.24.1" already present on machine\
  Normal  Created    74s   kubelet            Created container: bootstrap-controller\
  Normal  Started    73s   kubelet            Started container bootstrap-controller\
  Normal  Pulled     73s   kubelet            Container image "quay.io/enterprisedb/postgresql:17.0" already present on machine\
  Normal  Created    73s   kubelet            Created container: full-recovery\
  Normal  Started    73s   kubelet            Started container full-recovery\
\pard\pardeftab720\sa240\partightenfactor0

\f1 \cf0 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf4 Step 7: Validate the recovered cluster:
\f1\b0 \cf0 \
\pard\pardeftab720\partightenfactor0

\f3 \cf0 swapnilsuryawanshi@LAPTOP385PNIN cnp-yaml % \cf5 kubectl cnp psql cluster-pitr\cf0 \
psql (17.0)\
Type "help" for help.\
\
postgres=# \\dt+\
                                  List of relations\
 Schema | Name | Type  |  Owner   | Persistence | Access method | Size  | Description \
--------+------+-------+----------+-------------+---------------+-------+-------------\
 public | rama | table | postgres | permanent   | heap          | 38 MB | \
(1 row)\
\
\pard\pardeftab720\sa240\partightenfactor0

\f1 \cf0 Recovered data should reflect the state up to the target recovery time.\
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sa321\partightenfactor0

\f0\b\fs48 \cf2 Test Case 2: With 
\f3\b0\fs36 targetLSN
\f1 \cf3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf4 Step 1: At this point, we have two table\cf0 \
\pard\pardeftab720\partightenfactor0

\f3\b0 \cf0 postgres=# \cf5 \\dt+\cf0 \
                                    List of relations\
 Schema |  Name   | Type  |  Owner   | Persistence | Access method | Size  | Description \
--------+---------+-------+----------+-------------+---------------+-------+-------------\
 public | rama    | table | postgres | permanent   | heap          | 38 MB | \
 public | swapnil | table | postgres | permanent   | heap          | 64 kB | \
(2 rows)\
\
\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf4 Step 2: Check pg_current_wal_lsn for PITR:
\f3\b0 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 postgres=# \cf5 SELECT pg_current_wal_lsn();\cf0 \
 pg_current_wal_lsn \
--------------------\
 0/D000200\
(1 row)\
\
\pard\pardeftab720\partightenfactor0

\f4\b \cf0 Note:
\f3\b0  We will use this LSN for PITR.\
\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf4 Step 3: Create another table:\cf0 \
\pard\pardeftab720\partightenfactor0

\f3\b0 \cf0 postgres=# \cf5 create table t3 (id int);\cf0 \
CREATE TABLE\
postgres=# \
postgres=# \cf5 insert into t3 values(1);\cf0 \
INSERT 0 1\
postgres=# \cf5 insert into t3 values(2);\cf0 \
INSERT 0 1\
postgres=# \cf5 insert into t3 values(3);\cf0 \
INSERT 0 1\
\
postgres=# \\dt+\
                                      List of relations\
 Schema |  Name   | Type  |  Owner   | Persistence | Access method |    Size    | Description \
--------+---------+-------+----------+-------------+---------------+------------+-------------\
 public | rama    | table | postgres | permanent   | heap          | 38 MB      | \
 public | swapnil | table | postgres | permanent   | heap          | 64 kB      | \
 public | t3      | table | postgres | permanent   | heap          | 8192 bytes | \
(3 rows)
\f0\b \
\pard\pardeftab720\sa280\partightenfactor0

\f3\b0 \cf0 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf4 Step 4: Perform PITR to a Target LSN
\f3\b0 \cf0 \

\f0\b Create PITR yaml and use the  pg_current_wal_lsn 0/D000200 which is captured before creating t3 table:
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f3 \cf0 apiVersion: 
\f5\fs30 \cf7 \kerning1\expnd0\expndtw0 \CocoaLigature0 postgresql.cnpg.io/v1
\f3\fs36 \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf0 kind: Cluster\
metadata:\
  name: cluster-pitr-lsn\
spec:\
  logLevel: info\
  startDelay: 30\
  stopDelay: 30\
  nodeMaintenanceWindow:\
    inProgress: false\
    reusePVC: true\
  backup:\
    target: primary\
  enableSuperuserAccess: true\
  monitoring:\
    disableDefaultQueries: false\
    enablePodMonitor: false\
  minSyncReplicas: 0\
  postgresGID: 26\
  replicationSlots:\
    highAvailability:\
      slotPrefix: _cnp_\
    updateInterval: 30\
  primaryUpdateMethod: switchover\
  bootstrap:\
    recovery:\
      recoveryTarget:\
         targetLSN: "0/D000200"\
         exclusive: true\
      backup:\
        name: pg-full\
  failoverDelay: 0\
  postgresUID: 26\
  walStorage:\
    resizeInUseVolumes: true\
    size: 1G\
  maxSyncReplicas: 0\
  switchoverDelay: 40000000\
  storage:\
    resizeInUseVolumes: true\
    size: 2Gi\
  primaryUpdateStrategy: unsupervised\
  instances: 1\
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Apply the configuration:
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f3 \cf5 kubectl apply -f lsnpitr.yaml\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf4 Step 5: Validation Post-Recovery\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls2\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Verify tables and data integrity:\
\pard\pardeftab720\partightenfactor0

\f3 \cf0 postgres=# \cf5 \\dt+\cf0 \
                                    List of relations\
 Schema |  Name   | Type  |  Owner   | Persistence | Access method | Size  | Description \
--------+---------+-------+----------+-------------+---------------+-------+-------------\
 public | rama    | table | postgres | permanent   | heap          | 38 MB | \
 public | swapnil | table | postgres | permanent   | heap          | 64 kB | \
(2 rows)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls3\ilvl0
\f1 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \
}