{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\froman\fcharset0 Times-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red85\green142\blue40;\red253\green128\blue8;
\red253\green128\blue8;\red0\green0\blue233;\red85\green142\blue40;\red0\green0\blue0;\red133\green0\blue175;
\red5\green68\blue254;\red63\green105\blue30;}
{\*\expandedcolortbl;;\cssrgb\c50196\c50196\c50196;\cssrgb\c39975\c61335\c20601;\cssrgb\c100000\c57637\c0;
\cssrgb\c100000\c57637\c0;\cssrgb\c0\c0\c93333;\cssrgb\c39975\c61335\c20601;\cssrgb\c0\c0\c0;\cssrgb\c59982\c16236\c74118;
\cssrgb\c0\c38136\c99824;\cssrgb\c30831\c47797\c15540;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}}
\paperw11900\paperh16840\margl1440\margr1440\vieww35640\viewh21840\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs40 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa319\partightenfactor0

\f1\b \cf3 Step 1: Create a Kind Cluster\cf0 \
\pard\pardeftab720\sa240\partightenfactor0

\f0\b0 \cf0 Use the following syntax to create a cluster with a specific name:\

\f1\b Command Syntax
\f0\b0 :
\fs42 \
\pard\pardeftab720\partightenfactor0
\cf0 kind create cluster --name <cluster_name>\
\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b\fs40 \cf0 Example Execution
\f0\b0 :
\fs42 \
\pard\pardeftab720\partightenfactor0
\cf0 % \cf4 kind create cluster --name \cf4 \kerning1\expnd0\expndtw0 minio-cnpg-1.25.0\cf0 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b\fs40 \cf0 Result
\f0\b0 :
\fs42 \
using docker due to KIND_EXPERIMENTAL_PROVIDER\
\pard\pardeftab720\partightenfactor0
\cf0 Creating cluster \'93minio-cnpg-1.25.0" ...\
 \uc0\u10003  Ensuring node image (kindest/node:v1.32.0) \u55357 \u56764 \
 \uc0\u10003  Preparing nodes \u55357 \u56550   \
 \uc0\u10003  Writing configuration \u55357 \u56540  \
 \uc0\u10003  Starting control-plane \u55357 \u56697 \u65039  \
 \uc0\u10003  Installing CNI \u55357 \u56588  \
 \uc0\u10003  Installing StorageClass \u55357 \u56510  \
Set kubectl context to "kind-cnpg-1.25.0"\
\
You can now use your cluster with:\
\cf5 kubectl cluster-info --context kind-\cf4 \kerning1\expnd0\expndtw0 minio-cnpg-1.25.0\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf2 \
\pard\pardeftab720\sa319\partightenfactor0

\f1\b \cf3 Step 2: Check the Cluster Details
\f0\b0\fs42 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf4 kubectl cluster-info --context kind-\cf4 \kerning1\expnd0\expndtw0 minio-cnpg-1.25.0\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf2 \
\pard\pardeftab720\sa319\partightenfactor0

\f1\b \cf3 Step 3: Deploy the CNPG Operator\cf0 \
\pard\pardeftab720\sa240\partightenfactor0

\f0\b0 \cf0 Refer to the {\field{\*\fldinst{HYPERLINK "https://cloudnative-pg.io/documentation/1.25/installation_upgrade/"}}{\fldrslt \cf6 \ul \ulc6 installation guide}} for deploying the operator.
\fs42 \
\pard\pardeftab720\partightenfactor0
\cf4 kubectl apply --server-side -f https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/release-1.25/releases/cnpg-1.25.0.yaml\cf0 \
\pard\pardeftab720\partightenfactor0

\fs40 \cf2 \
\pard\pardeftab720\sa319\partightenfactor0

\f1\b \cf3 Step 4: Verify Deployment Status
\f0\b0\fs42 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf4 kubectl get deployment -n cnpg-system cnpg-controller-manager\cf0 \
\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b\fs40 \cf0 Example Output
\f0\b0 :
\fs42 \
\pard\pardeftab720\partightenfactor0

\fs34 \cf0 NAME                      READY   UP-TO-DATE   AVAILABLE   AGE\
cnpg-controller-manager   1/1     1            1           47s
\fs42 \
\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs40 \cf3 Step 5: Install the CloudNativePG Plugin\cf0 \
\pard\pardeftab720\sa240\partightenfactor0

\f0\b0\fs36 \cf0 Install the CloudNativePG 
\fs38 kubectl
\fs36  plugin for easier management:
\fs38 \
\pard\pardeftab720\partightenfactor0
\cf4 curl -sSfL https://github.com/cloudnative-pg/cloudnative-pg/raw/main/hack/install-cnpg-plugin.sh | sudo sh -s -- -b /usr/local/bin\cf0 \
\
\pard\pardeftab720\sa240\partightenfactor0

\fs36 \cf0 Verify the installation:
\fs38 \
\pard\pardeftab720\partightenfactor0
\cf5 kubectl cnpg version
\fs42 \cf0 \

\fs46 \
\pard\pardeftab720\sa319\partightenfactor0

\f1\b\fs40 \cf7 Step 6: Install Minio Object Storage\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b0\fs38 \cf5 % vi minio.yaml\cf0 \
\
apiVersion: v1\
kind: Secret\
metadata:\
  name: minio-creds\
data:\
  ACCESS_KEY_ID: bWluaW8=\
  ACCESS_SECRET_KEY: bWluaW8xMjM=\
\
---\
apiVersion: v1\
kind: Service\
metadata:\
  name: minio-service\
spec:\
  ports:\
    - port: 9000\
      targetPort: 9000\
      protocol: TCP\
  selector:\
    app: minio\
\
---\
apiVersion: v1\
kind: PersistentVolumeClaim\
metadata:\
  name: minio-pv-claim\
spec:\
  accessModes:\
    - ReadWriteOnce\
  resources:\
    requests:\
      storage: 2Gi\
  storageClassName: standard\
\
---\
apiVersion: apps/v1\
kind: Deployment\
metadata:\
  name: minio\
spec:\
  selector:\
    matchLabels:\
      app: minio\
  template:\
    metadata:\
      labels:\
        app: minio\
    spec:\
      volumes:\
      - name: data\
        persistentVolumeClaim:\
          claimName: minio-pv-claim\
      containers:\
      - name: minio\
        image: minio/minio:RELEASE.2025-01-20T14-49-07Z\
        args:\
        - server\
        - /data\
        env:\
        - name: MINIO_ACCESS_KEY\
          valueFrom:\
            secretKeyRef:\
              name: minio-creds\
              key: ACCESS_KEY_ID\
        - name: MINIO_SECRET_KEY\
          valueFrom:\
            secretKeyRef:\
              name: minio-creds\
              key: ACCESS_SECRET_KEY\
        ports:\
        - containerPort: 9000\
        readinessProbe:\
          httpGet:\
            path: /minio/health/ready\
            port: 9000\
          initialDelaySeconds: 30\
        livenessProbe:\
          httpGet:\
            path: /minio/health/live\
            port: 9000\
          initialDelaySeconds: 30   \

\fs36 \
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs40 \cf7 Step 7. Apply and Verify Minio Deployment
\fs36 \cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b0\fs38 \cf0 - \cf5 kubectl apply -f  minio.yaml\cf4 \

\f1\b\fs36 \cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b0\fs38 \cf5 - kubectl get deployment minio\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\fs36 \cf0 \
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs40 \cf7 Step 8. Create and Deploy HostPath CSI for Volume Snapshots and barman backups.\cf0 \
A. Create\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs34 \cf0 % \cf5 vi deploy-hostpath-csi.sh\cf0 \
\
#!/bin/env bash\
\
CSI_BASE_URL=https://raw.githubusercontent.com/kubernetes-csi\
CSI_DRIVER_HOST_PATH_VERSION=v1.11.0\
SNAPSHOTTER_VERSION="v6.3.1"\
PROVISIONER_VERSION="v3.6.1"\
RESIZER_VERSION="v1.9.1"\
ATTACHER_VERSION="v4.4.1"\
\
## Install external snapshotter CRD\
kubectl apply -f "$\{CSI_BASE_URL\}"/external-snapshotter/"$\{SNAPSHOTTER_VERSION\}"/client/config/crd/snapshot.storage.k8s.io_volumesnapshotclasses.yaml\
kubectl apply -f "$\{CSI_BASE_URL\}"/external-snapshotter/"$\{SNAPSHOTTER_VERSION\}"/client/config/crd/snapshot.storage.k8s.io_volumesnapshotcontents.yaml\
kubectl apply -f "$\{CSI_BASE_URL\}"/external-snapshotter/"$\{SNAPSHOTTER_VERSION\}"/client/config/crd/snapshot.storage.k8s.io_volumesnapshots.yaml\
kubectl apply -f "$\{CSI_BASE_URL\}"/external-snapshotter/"$\{SNAPSHOTTER_VERSION\}"/deploy/kubernetes/snapshot-controller/rbac-snapshot-controller.yaml\
kubectl apply -f "$\{CSI_BASE_URL\}"/external-snapshotter/"$\{SNAPSHOTTER_VERSION\}"/deploy/kubernetes/snapshot-controller/setup-snapshot-controller.yaml\
kubectl apply -f "$\{CSI_BASE_URL\}"/external-snapshotter/"$\{SNAPSHOTTER_VERSION\}"/deploy/kubernetes/csi-snapshotter/rbac-csi-snapshotter.yaml\
\
## Install external provisioner\
kubectl apply -f "$\{CSI_BASE_URL\}"/external-provisioner/"$\{PROVISIONER_VERSION\}"/deploy/kubernetes/rbac.yaml\
\
## Install external attacher\
kubectl apply -f "$\{CSI_BASE_URL\}"/external-attacher/"$\{ATTACHER_VERSION\}"/deploy/kubernetes/rbac.yaml\
\
## Install external resizer\
kubectl apply -f "$\{CSI_BASE_URL\}"/external-resizer/"$\{RESIZER_VERSION\}"/deploy/kubernetes/rbac.yaml\
\
## Install driver and plugin\
kubectl apply -f "$\{CSI_BASE_URL\}"/csi-driver-host-path/"$\{CSI_DRIVER_HOST_PATH_VERSION\}"/deploy/kubernetes-1.24/hostpath/csi-hostpath-driverinfo.yaml\
kubectl apply -f "$\{CSI_BASE_URL\}"/csi-driver-host-path/"$\{CSI_DRIVER_HOST_PATH_VERSION\}"/deploy/kubernetes-1.24/hostpath/csi-hostpath-plugin.yaml\
\
## create volumesnapshotclass\
kubectl apply -f "$\{CSI_BASE_URL\}"/csi-driver-host-path/"$\{CSI_DRIVER_HOST_PATH_VERSION\}"/deploy/kubernetes-1.24/hostpath/csi-hostpath-snapshotclass.yaml\
\
## create storage class\
kubectl apply -f "$\{CSI_BASE_URL\}"/csi-driver-host-path/"$\{CSI_DRIVER_HOST_PATH_VERSION\}"/examples/csi-storageclass.yaml\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs40 \cf0 \
\pard\pardeftab720\sa280\partightenfactor0
\cf0 B. Deploy
\fs36 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf5 \kerning1\expnd0\expndtw0 % 
\fs38 \expnd0\expndtw0\kerning0
bash deploy-hostpath-csi.sh\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs36 \cf0 \
\pard\pardeftab720\sa280\partightenfactor0

\fs40 \cf0 C. Verify
\fs36 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf5 \kerning1\expnd0\expndtw0 % kubectl get deployment -A \
\cf0 \
NAMESPACE                    NAME                                     READY   UP-TO-DATE   AVAILABLE   AGE\
default                      minio                                    1/1     1            1           4m4s\
kube-system                  coredns                                  2/2     2            2           23m\
kube-system                  snapshot-controller                      2/2     2            2           36s\
local-path-storage           local-path-provisioner                   1/1     1            1           22m
\f1\b \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls2\ilvl0
\f0\b0 \cf0 \
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs40 \cf7 Step 9. Restart PostgreSQL Operator Controller Manager
\fs36 \cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b0\fs38 \cf5 kubectl rollout restart deployment -n postgresql-operator-system postgresql-operator-controller-manager\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls3\ilvl0
\fs36 \cf0 \
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs40 \cf7 Step 10. Deploy PostgreSQL Cluster with Minio Storage\cf0 \
A. Create\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs34 \cf5 % vi cluster-minio.yaml\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs36 \cf0 apiVersion: postgresql.cnpg.io/v1\
kind: Cluster\
metadata:\
  name: 
\fs40 \kerning1\expnd0\expndtw0 cluster-snapshot
\fs36 \expnd0\expndtw0\kerning0
\
spec:\
  instances: 2\
\
  storage:\
    storageClass: csi-hostpath-sc\
    size: 1Gi\
\
  # Backup properties\
  # This assumes a local minio setup\
  backup:\
    volumeSnapshot:\
      className: csi-hostpath-snapclass\
    barmanObjectStore:\
      destinationPath: s3://swapnil-backup/\
      endpointURL: http://minio-service:9000\
      s3Credentials:\
        accessKeyId:\
          name: minio-creds\
          key: ACCESS_KEY_ID\
        secretAccessKey:\
          name: minio-creds\
          key: ACCESS_SECRET_KEY\
      wal:\
        compression: gzip\
      data:\
        immediateCheckpoint
\fs38 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs36 \cf0 B. Apply
\f0\b0 \
\pard\pardeftab720\partightenfactor0
\cf5 kubectl apply -f cluster-minio.yaml\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\sa280\partightenfactor0

\f1\b \cf0 C. Verify
\f0\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 % \cf5 kubectl get pod\cf0    \
\
NAME                     READY   STATUS    RESTARTS   AGE\
cluster-snapshot-1       1/1     Running   0          72s\
cluster-snapshot-2       1/1     Running   0          33s\
csi-hostpathplugin-0     8/8     Running   0          8m35s\
minio-74bb68884d-dp4wn   1/1     Running   0          12m\
\expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs40 \cf3 Step 11
\fs38 \cf7 . Verify PostgreSQL Cluster Status
\fs36 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf5 \kerning1\expnd0\expndtw0 % kubectl get cluster\cf0  \
NAME               AGE    INSTANCES   READY   STATUS                     PRIMARY\
cluster-snapshot   3m1s   2           2       Cluster in healthy state   cluster-snapshot-1\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls4\ilvl0\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs40 \cf3 Step 
\fs36 \cf7 12. Check Detailed Cluster Status\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 \kerning1\expnd0\expndtw0 \
\cf5 % kubectl cnpg status cluster-snapshot\cf0 \
Cluster Summary\
Name                 default/cluster-snapshot\
System ID:           7464614539111931932\
PostgreSQL Image:    quay.io/enterprisedb/postgresql:17.2\
Primary instance:    cluster-snapshot-1\
Primary start time:  2025-01-27 15:17:05 +0000 UTC (uptime 1m42s)\
Status:              Cluster in healthy state \
Instances:           2\
Ready instances:     2\
Size:                94M\
Current Write LSN:   0/4000060 (Timeline: 1 - WAL File: 000000010000000000000004)\
\
Continuous Backup status\
First Point of Recoverability:  Not Available\
Working WAL archiving:          OK\
WALs waiting to be archived:    0\
Last Archived WAL:              000000010000000000000003.00000028.backup   @   2025-01-27T15:17:29.518622Z\
Last Failed WAL:                -\
\
Streaming Replication status\
Replication Slots Enabled\
Name                Sent LSN   Write LSN  Flush LSN  Replay LSN  Write Lag  Flush Lag  Replay Lag  State      Sync State  Sync Priority  Replication Slot\
----                --------   ---------  ---------  ----------  ---------  ---------  ----------  -----      ----------  -------------  ----------------\
cluster-snapshot-2  0/4000060  0/4000060  0/4000060  0/4000060   00:00:00   00:00:00   00:00:00    streaming  async       0              active\
\
Instances status\
Name                Current LSN  Replication role  Status  QoS         Manager Version  Node\
----                -----------  ----------------  ------  ---         ---------------  ----\
cluster-snapshot-1  0/4000060    Primary           OK      BestEffort  1.25.0           miniio-cnp-1.25.0-control-plane\
cluster-snapshot-2  0/4000060    Standby (async)   OK      BestEffort  1.25.0           miniio-cnp-1.25.0-control-plane\expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\cf0 \

\f1\b \cf9 Method:1 Backup using plug-in
\f0\b0 \cf0 \
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs40 \cf3 Step 
\fs36 \cf7 13. Perform Volume Snapshot Backup\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 \kerning1\expnd0\expndtw0 %\cf5  kubectl cnp backup cluster-snapshot -m volumeSnapshot\cf0 \
backup/cluster-snapshot-20250127205000 created\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls5\ilvl0\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs40 \cf3 Step 
\fs36 \cf7 14. Verify Backup Completion\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 \kerning1\expnd0\expndtw0 % \cf5 kubectl get backup \cf0 \
NAME                              AGE   CLUSTER            METHOD           PHASE       ERROR\
cluster-snapshot-20250127205000   8s    cluster-snapshot   volumeSnapshot   completed \
\
% \cf5 kubectl get volumeSnapshot\cf0 \
NAME                              READYTOUSE   SOURCEPVC            SOURCESNAPSHOTCONTENT   RESTORESIZE   SNAPSHOTCLASS            SNAPSHOTCONTENT                                    CREATIONTIME   AGE\
cluster-snapshot-20250127205000   true         cluster-snapshot-2                           1Gi           csi-hostpath-snapclass   snapcontent-40172d26-8468-4ddc-a074-5f3aa281384e   17s            17s\
swapnilsuryawanshi@LAPTOP385PNIN runbook-cnp %\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls6\ilvl0\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs40 \cf3 Step 
\fs36 \cf7 15.  Perform Barman Backup\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 \kerning1\expnd0\expndtw0 % \cf5 kubectl cnp backup cluster-snapshot\cf0 \
backup/cluster-snapshot-20250127205100 created\
\
\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs40 \cf3 \expnd0\expndtw0\kerning0
Step 
\fs36 \cf7 16. Verify Backup Completion
\f0\b0 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 ]% \cf5 kubectl get backup \cf0                 \
NAME                              AGE   CLUSTER            METHOD              PHASE       ERROR\
cluster-snapshot-20250127205000   64s   cluster-snapshot   volumeSnapshot      completed   \
cluster-snapshot-20250127205100   4s    cluster-snapshot   barmanObjectStore   completed   \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0

\f1\b \cf9 Method:2 Backup using Yaml file\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 \kerning1\expnd0\expndtw0 \
% \cf5 vi volume-snapshot-backup.yaml\cf0 \
\
apiVersion: postgresql.k8s.enterprisedb.io/v1\
kind: Backup\
metadata:\
  name: volume-snapshot-backup\
spec:\
  cluster:\
    name: cluster-snapshot\
  method: volumeSnapshot\
\
% \cf5 kubectl apply -f volume-snapshot-backup.yaml\cf0 \
backup.postgresql.k8s.enterprisedb.io/volume-snapshot-backup created\
\
% \cf5 kubectl get volumeSnapshot \cf0                                   \
NAME                     READYTOUSE   SOURCEPVC            SOURCESNAPSHOTCONTENT   RESTORESIZE   SNAPSHOTCLASS            SNAPSHOTCONTENT                                    CREATIONTIME   AGE\
volume-snapshot-backup   true         cluster-snapshot-2                           1Gi           csi-hostpath-snapclass   snapcontent-d26061ef-9611-42bc-bb33-2974b8f691e2   36s            36s\
\

\f1\b\fs40 \cf10 To check and verify the backups and wal file install the MC (Minio Client)
\f0\b0\fs36 \cf0 \
\

\f1\b \cf9 Download and Install MinIO Client (mc)
\f0\b0 \cf0 \
\

\f1\b \cf11 Step 1: Download mc \
\
\cf8 For macOS
\f0\b0 \cf0 \
\
\cf5 curl -LO https://dl.min.io/client/mc/release/darwin-amd64/mc\
\

\f1\b \cf8 For Linux:
\f0\b0 \cf5 \
\
curl -LO https://dl.min.io/client/mc/release/linux-amd64/mc\cf0 \
\

\f1\b \cf11 Step 2: Make the binary executable
\f0\b0 \cf0 \
\
\cf5 chmod +x mc\cf0 \
\

\f1\b \cf11 Step 3: Move the binary to /usr/local/bin/\cf0 \

\f0\b0 \
\cf5 sudo mv -f mc /usr/local/bin/mc\cf0 \
\

\f1\b \cf11 Step 4: Verify Installation
\f0\b0 \cf0 \
\
\cf5 mc --help\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf11 Step 5: Set Up Port Forwarding for MinIO
\f0\b0 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Run the following command in a
\f1\b  separate terminal
\f0\b0  to enable port forwarding:\
\
\cf5 kubectl port-forward svc/minio-service 9000:9000\cf0 \
\
Expected Output:\
Forwarding from 127.0.0.1:9000 -> 9000\
Forwarding from [::1]:9000 -> 9000\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf3 Step 6:\cf7  Configure MinIO Client (mc)
\f0\b0 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\cf5 mc alias list\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf11 Step 7: Remove any existing MinIO alias
\f0\b0 \cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf5 mc alias remove minio\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf11 Step 8:  Reconfirm the alias removal
\f0\b0 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
mc alias list\
\
\

\f1\b \cf11 Step 9: Set up the MinIO alias
\f0\b0 \cf0 \
\
\cf5 ACCESS_KEY_ID=$(echo -n minio | base64)\
ACCESS_SECRET_KEY=$(echo -n minio123 | base64)\cf0 \
\
\cf5 mc alias set 'minio' 'http://127.0.0.1:9000' $(echo -n $ACCESS_KEY_ID | base64 -d) $(echo -n $ACCESS_SECRET_KEY | base64 -d)\cf0 \
\

\f1\b \cf11 Step 10: Confirm the alias setup
\f0\b0 \cf0 \
\
\cf5 mc alias list\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf11 Step 11:  Verify MinIO Connection
\f0\b0 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f1\b 1: Retrieve MinIO Server Information\

\f0\b0 \
\cf5 mc admin info minio\cf0 \
\

\f1\b 2: List Buckets in MinIO
\f0\b0 \
\
\cf5 mc ls minio\cf0 \
\
Expected Output:\
[2025-01-29 16:14:37 IST]     0B swapnil-backup/\
\

\f1\b 3.  Deleting Data and Buckets in MinIO
\f0\b0 \
\
\cf5 mc rm --recursive --force minio/swapnil-backup\cf0 \
\
Expected Output:\
Removed `minio/swapnil-backup/test/cluster-backup/wals/0000000100000000/000000010000000000000017.gz`.\
Removed `minio/swapnil-backup/test/cluster-backup/wals/0000000100000000/000000010000000000000018.gz`.\
\

\f1\b 4. Delete the MinIO Bucket\

\f0\b0 \
\cf5 mc rb --force minio/swapnil-backup\cf0 \
\
Expected Output:\
Removed `minio/swapnil-backup` successfully.\
\

\f1\b 5. Confirm Bucket Deletion
\f0\b0 \
\cf5 mc ls minio\cf0 \
\
Expected Output:\
(No output if no buckets exist)\
\
\
\
\
}